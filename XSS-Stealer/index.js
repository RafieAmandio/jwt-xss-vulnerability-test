const express = require("express");
const fs = require("fs/promises");
const requestIp = require("request-ip");
const cors = require("cors");

const app = express();
app.use(express.json());
app.use(cors());

const TOKENS_FILE = "tokens.json";

app.get("/storeToken/:token", async (req, res) => {
  const { token } = req.params;
  const clientIp = requestIp.getClientIp(req);
  if (!token) {
    return res.status(400).json({ message: "Token is required" });
  }

  try {
    const tokens = await getTokens();
    tokens.push({ token, timestamp: new Date(), clientIp });
    await saveTokens(tokens);

    res.json({ message: "Token stored successfully" });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "Internal server error" });
  }
});

const getTokens = async () => {
  try {
    const data = await fs.readFile(TOKENS_FILE, "utf-8");
    return JSON.parse(data);
  } catch (error) {
    return [];
  }
};

const saveTokens = async (tokens) => {
  await fs.writeFile(TOKENS_FILE, JSON.stringify(tokens, null, 2));
};

const PORT = 6969;

app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});
