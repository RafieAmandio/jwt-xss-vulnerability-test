const express = require("express");
const jwt = require("jsonwebtoken");
const fs = require("fs/promises");
const bcrypt = require("bcrypt");
const cors = require("cors");

const app = express();
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(cors());

const SECRET = "123456"; // Replace with your secret key

const getUserData = async () => {
  try {
    const data = await fs.readFile("users.json", "utf-8");
    return JSON.parse(data);
  } catch (error) {
    return [];
  }
};

const saveUserData = async (users) => {
  await fs.writeFile("users.json", JSON.stringify(users, null, 2));
};

const getTodoData = async () => {
  try {
    const data = await fs.readFile("to-do.json", "utf-8");
    return JSON.parse(data);
  } catch (error) {
    return [];
  }
};

const saveTodoData = async (todos) => {
  await fs.writeFile("to-do.json", JSON.stringify(todos, null, 2));
};

app.post("/add-todo", async (req, res) => {
  const { todo } = req.body;
  const token =
    req.headers.authorization && req.headers.authorization.split(" ")[1];

  try {
    const decodedToken = jwt.verify(token, SECRET);
    const todos = await getTodoData();

    const newTodo = { username: decodedToken.username, value: todo };
    todos.push(newTodo);

    await saveTodoData(todos);

    res.json({ message: "Todo added successfully", todo: newTodo });
  } catch (error) {
    console.log(error);
    res.status(401).json({ message: "Invalid token" });
  }
});

app.get("/get-latest-todos", async (req, res) => {
  try {
    const todos = await getTodoData();
    const latestTodos = todos.slice(-5); // Get the 5 latest todos

    res.json(latestTodos);
  } catch (error) {
    console.log(error);
    res.status(500).json({ message: "Internal server error" });
  }
});

app.post("/login", async (req, res) => {
  const { username, password } = req.body;

  try {
    const users = await getUserData();
    const user = users.find((u) => u.username === username);

    if (!user || !(await bcrypt.compare(password, user.password))) {
      return res.status(401).json({ message: "Invalid credentials" });
    }

    const token = jwt.sign({ username: user.username }, SECRET);
    res.json({ token });
  } catch (error) {
    res.status(500).json({ message: "Internal server error" });
  }
});

app.post("/register", async (req, res) => {
  const { username, password } = req.body;
  try {
    const users = await getUserData();

    if (users.find((u) => u.username === username)) {
      return res.status(400).json({ message: "Username already exists" });
    }
    const saltRounds = 10;
    const hashedPassword = await bcrypt.hash(password, saltRounds);
    users.push({ username, password: hashedPassword });

    await saveUserData(users);

    res.json({ message: "User registered successfully" });
  } catch (error) {
    console.log(error);
    res.status(500).json({ message: "Internal server error" });
  }
});

app.get("/jwt", (req, res) => {
  const token =
    req.headers.authorization && req.headers.authorization.split(" ")[1];
  const decodedHeader = jwt.decode(token, { complete: true }).header;
  const key = decodedHeader.alg === "none" ? null : SECRET;

  try {
    const decodedToken = jwt.verify(token, key, {
      algorithms: ["HS256", "none"],
    });
    res.json({
      result: "Valid Token",
      role: decodedToken.username === "admin" ? "admin" : "user",
    });
  } catch (err) {
    console.log(err);
    res.json({ result: "Invalid Token" });
  }
});

app.get("/users", async (req, res) => {
  try {
    const users = await getUserData();
    res.json(users);
  } catch (error) {
    console.log(error);
    res.status(500).json({ message: "Internal server error" });
  }
});

app.listen(3000, () => {
  console.log("Server is running on port 3000");
});
